- When react compoenents have to perform expensive calculations
- example big list of employees and search query, component should filter employee names by query
- in such cases, we can try to imporove performance by memoization technique
- useMemo Hook
This hook accepts a compute function and a dependency array
- During initial rendering, useMemo(compute, dependencies) invokes compute, memoizes the calculation result, and returns it to the component.
- If during netx renderings, if dependencies do not change, useMemo() does not run compute fn but rather returns the memoized value.
- But if dependencies change during re-rendering, the useMemo() invokes compute function, memoizes the value and returns it.
- If your computation callback uses props or state values, then indicate those values as dependencies.

const memoizedResult = useMemo(() => {
  return expensiveFunction(propA, propB);
}, [propA, propB]);

useCallback()
useCallback, compared to useMemo is a more specialized hook that memoizes callbacks. It returns the same function instance as long as the dependencies are same.


Callback example
import { useCallback } from 'react';

function MyComponent({ props }) {
  const callback = () => {
    return 'result'
  }
  const memoizedCallback = useCallback(callback, [props])

  return <ChildComponent callback={memoizedCallback} />
}

Use Memo Example
import { useMemo } from 'react';

function MyComponent({ prop }) {
  const callback = () => {
    return 'result'
  }

  const memoizedCallback = useMemo(() => callback, [prop]);

  return <ChildComponent callback={memoizedCallback} />
}